# Kitchen Mic Project Plan 🎙️
Last Updated: 2024-12-08T16:33:09-05:00

## Project goals
Create an always-on audio recording system that captures, transcribes, and organizes conversations with high-fidelity audio preservation.

### 🔧 LLM Instructions
STOP! Before taking ANY action, follow these steps in order:

1. 📖 READ PHASE (Required)
   - Read this ENTIRE plan document first
   - Load and read the relevant milestone plan from .milestone/<milestone_id>.plan
   - Read the .milestone.template if starting a new milestone
   
2. ✍️ PLANNING PHASE (Required)
   - Write a checklist of ALL steps needed for the current task
   - List any assumptions that need verification
   - EXPLICITLY ask for user input on the approach BEFORE implementing
   - Wait for user confirmation before proceeding
   
3. 🏗️ IMPLEMENTATION PHASE (After approval)
   - Follow the approved approach exactly
   - Track progress using emoji states
   - Document each significant change
   - Update relevant plan files after each step
   
4. 🔄 VERIFICATION PHASE (Required)
   - Verify completion of each step
   - Document integration with other components
   - Update milestone status
   - Write impact assessment for future milestones

5. 📝 COMMUNICATION REQUIREMENTS
   - End every response with current goal summary
   - Use precise technical language
   - Document all decisions and their rationale
   - Flag any deviations from the plan

IMPORTANT: 
- NO implementation without explicit approach approval
- NO assumptions without verification
- NO skipping of planning phase
- ALL changes must be documented

### 📋 Development Guidelines
- Strive for simplicity over convention
- Use good epistemology, do not make assumptions you cannot verify 
- Avoid midwit cargo culted development patterns without a clear reason
- Write modular code in small files with brief doc comments
- Keep the .plan and .milestone updated after every step
- Write logs with timestamps and context
- During debugging, update plan and review previous steps
- don't write unit tests instead write little tools to manually run

### 🛠️ Project Tools
- Language: Python
- Audio Processing: librosa, Silero VAD
- Transcription: Whisper
- LLM: Llama 7b (http://rat.local:8080/v1/)
- Audio Source: staple.local:12345 (44Hz raw audio)

### 🏗️ System Architecture
- Data Pipeline Design
  - Each stage is a pure function that takes input data and returns enriched data
  - Pipeline handles all concurrency, queuing, and error recovery
  - Components communicate through standardized message objects
  - Message Flow:
    ```
    ConversationMessage:
      - id: str
      - start_time: float
      - end_time: float
      - audio_data: np.ndarray (44kHz)
      - metadata: Dict
        - chunk_timestamps: List[float]
        - vad_events: List[Dict]
        
    TranscriptionMessage(ConversationMessage):
      + transcription: Dict
        - text: str
        - segments: List[Dict]
        - language: str
        
    SummaryMessage(TranscriptionMessage):
      + summary: str
      + title: str
    ```
  - Stage Responsibilities:
    1. Conversation Collection: Audio + VAD -> ConversationMessage
    2. Transcription: ConversationMessage -> TranscriptionMessage
    3. Summary: TranscriptionMessage -> SummaryMessage
    4. Storage: Handles persistence of final state
  - Each conversation flows through stages: Collection -> Transcription -> Summary -> Storage
  - Each stage enriches conversation data without modifying previous data
  - Non-blocking operation with thread-safe handoffs
  - Location: src/pipeline/ (after milestone 3)
  - Components:
    - ConversationData: Core data structure tracking all conversation info
    - PipelineStage: Base class for processing stages
    - Pipeline: Coordinates data flow between stages

### 🎯 Project Milestones
1. [✅] Audio Capture (COMPLETED)
   - Location: .milestone/01-audio.plan
   - Description: Implement basic audio capture and processing
   - Components:
     - Audio device selection
     - Continuous recording
     - Buffer management
     - Sample rate handling
     - Basic file I/O

2. [✅] Voice Activity Detection (COMPLETED)
   - Location: .milestone/02-vad.plan
   - Description: Add voice activity detection for conversation boundaries
   - Components:
     - VAD model integration
     - State management
     - Event handling
     - Debug visualization

3. [✅] Audio Collection & Transcription (COMPLETED)
   - Location: .milestone/03-transcription.plan
   - Description: Integrate Whisper for accurate speech transcription
   - Components:
     - Dual stream audio handling (44kHz/16kHz)
     - Pre-speech buffering
     - Whisper large model integration
     - Conversation message structure
   - Achievements:
     - Working transcription system with high accuracy
     - Proper audio stream handling
     - Clean file organization
     - Verified with real conversations

4. [✨] LLM Integration & Organization (COMPLETED)
   - Location: .milestone/04-llm.plan
   - Description: Add LLM-powered features for conversation understanding
   - Components:
     - Conversation summarization
     - Topic extraction
     - Intent classification
     - Semantic search indexing
     - Knowledge graph building
   - Achievements:
     - OpenAI-compatible LLM client
     - Reliable summary generation
     - Message-based pipeline integration
     - Proper error handling and validation

5. [⏳] Pipeline & Summarization (NEXT UP)
   - Location: .milestone/05-pipeline.plan
   - Description: Implement pipeline architecture for scalability
   - Components:
     - Move components into pipeline stages
     - Add message passing system
     - Implement async processing
     - Add monitoring and telemetry

### 🎨 Project Status Indicators
- ✨ Completed
- 🏃 In Progress
- 🐛 Debugging/Troubleshooting
- 💤 Not Started
- 🎉 Milestone Achieved

### 📁 File Structure
/kitchen_mic
├── src/
│   ├── audio/          # Audio processing modules
│   ├── transcription/  # Whisper integration
│   ├── vad/           # Voice activity detection
│   ├── llm/           # LLM integration
│   └── utils/         # Shared utilities
├── debug/             # Debug tools and audio monitoring
├── storage/          
│   ├── raw/          # High fidelity audio storage
│   └── processed/    # Transcriptions and summaries
└── config/           # Configuration files

### 🔑 Key Technical Requirements
- Maintain two audio streams:
  1. Original 44Hz high-fidelity audio for storage
  2. Downsampled 16kHz audio for Silero VAD
- Debug capabilities:
  - Real-time audio monitoring
  - Switch between original and downsampled audio
  - Visual audio stream indicators
- Data persistence:
  - Date-based folder structure
  - Original audio preservation
  - Transcriptions and summaries

### 📝 Development Workflow
1. Implement and test each component in isolation
2. Use debug tools to verify audio processing
3. Integration testing with small conversation samples
4. Full system testing with extended recording periods

## Progress Updates
2024-12-08: Completed Milestone 2 (VAD)
- Successfully integrated Silero VAD with real-time audio processing
- Implemented visualization tools for audio and speech detection
- Verified accuracy with live testing
- Ready to proceed with Milestone 3 (Transcription)

2024-12-08: Completed Milestone 3 (Transcription)
- Successfully integrated Whisper for accurate speech transcription
- Implemented dual stream audio handling
- Verified transcription accuracy with real conversations

## WIP Notes
- we've set up venv 
- our shell does not have source so we need to use the full path to the venv bin